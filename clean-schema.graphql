schema {
  query: _Query
}

directive @strExpr(char: Char, chars: [Char!], string: String, strings: [String!], byte: Byte, bytes: [Byte!], short: Short, shorts: [Short!], int: Int, ints: [Int!], long: Long, longs: [Long!], float: _Float4, floats: [_Float4!], double: Float, doubles: [Float!], bigDecimal: BigDecimal, bigDecimals: [BigDecimal!], date: _Date, dates: [_Date!], dateTime: _DateTime, dateTimes: [_DateTime!], offsetDateTime: _OffsetDateTime, offsetDateTimes: [_OffsetDateTime!], time: _Time, times: [_Time!], boolean: Boolean, booleans: [Boolean!]) on FIELD

directive @mergeReqSpec(cond: String) on INLINE_FRAGMENT

directive @dependsOnByGet(commandId: String!) on FIELD

directive @dependsOnByUpdateOrCreate(commandId: String!) on FIELD

scalar _Date

scalar _DateTime

type _E_Clinic implements _Entity & Clinic {
  id: ID!
  name: String!
  sys_ver: Long
  type: String!
  clinicCustomerList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicCustomer!
  clinicDoctorList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctor!
  clinicOfficeList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicOffice!
  address: _G_Address!
}

type _E_ClinicCustomer implements _Entity & ClinicCustomer {
  id: ID!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicCustomerTableLost(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorTable!
}

type _E_ClinicDoctor implements _Entity & ClinicDoctor {
  id: ID!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicDoctorAvailabilityList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorAvailability!
}

type _E_ClinicDoctorAvailability implements _Entity & ClinicDoctorAvailability {
  id: ID!
  beginDate: _DateTime!
  endDate: _DateTime!
  type: String!
  clinicDoctor(alias: String): ClinicDoctor!
  clinicOffice(alias: String): ClinicOffice!
  aggregateRoot(alias: String): Clinic
  clinicDoctorTableList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorTable!
}

type _E_ClinicDoctorTable implements _Entity & ClinicDoctorTable {
  id: ID!
  beginDate: _DateTime!
  endDate: _DateTime!
  comment: String
  type: String!
  clinicCustomer(alias: String): ClinicCustomer!
  clinicDoctorAvailability(alias: String): ClinicDoctorAvailability!
  aggregateRoot(alias: String): Clinic
}

type _E_ClinicOffice implements _Entity & ClinicOffice {
  id: ID!
  officeNum: String!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicOfficeAvailabilityList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorAvailability!
}

type _E_Customer implements _Entity & Customer {
  id: ID!
  insuranceNum: String!
  sys_ver: Long
  type: String!
}

type _E_Doctor implements _Entity & Doctor {
  id: ID!
  sys_ver: Long
  type: String!
  doctorType(alias: String): DoctorType!
}

type _E_DoctorType implements _Entity & DoctorType {
  id: ID!
  descr: String
  name: String!
  sys_ver: Long
  type: String!
  aggregateRoot(alias: String): RootDictionary
}

type _E_Person implements _Entity & Person {
  id: ID!
  birthDate: _Date
  firstName: String!
  lastName: String!
  sex: _EN_Sex!
  sys_ver: Long
  type: String!
}

type _E_RootDictionary implements _Entity & RootDictionary {
  id: ID!
  sys_ver: Long
  type: String!
}

type _E_VipCustomer implements _Entity & VipCustomer & Customer {
  id: ID!
  level: Int
  insuranceNum: String!
  sys_ver: Long
  type: String!
}

type _EC_Clinic {
  elems: [Clinic!]!
  count: Int!
}

type _EC_ClinicCustomer {
  elems: [ClinicCustomer!]!
  count: Int!
}

type _EC_ClinicDoctor {
  elems: [ClinicDoctor!]!
  count: Int!
}

type _EC_ClinicDoctorAvailability {
  elems: [ClinicDoctorAvailability!]!
  count: Int!
}

type _EC_ClinicDoctorTable {
  elems: [ClinicDoctorTable!]!
  count: Int!
}

type _EC_ClinicOffice {
  elems: [ClinicOffice!]!
  count: Int!
}

type _EC_Customer {
  elems: [Customer!]!
  count: Int!
}

type _EC_Doctor {
  elems: [Doctor!]!
  count: Int!
}

type _EC_DoctorType {
  elems: [DoctorType!]!
  count: Int!
}

type _EC_Person {
  elems: [Person!]!
  count: Int!
}

type _EC_RootDictionary {
  elems: [RootDictionary!]!
  count: Int!
}

type _EC_VipCustomer {
  elems: [VipCustomer!]!
  count: Int!
}

enum _EN_Sex {
  M
  W
}

interface _Entity {
  id: ID!
}

scalar _Float4

type _G_Address {
  city: String
  flatNo: String
  street: String
}

type _MergedEntitiesCollection {
  elems: [_Entity!]!
  count: Int!
}

scalar _OffsetDateTime

type _Query {
  merge(limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _MergedEntitiesCollection!
  resolveReferences(referenceType: String!, ids: [ID!]!): [_Reference!]!
  searchClinic(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_Clinic!
  searchClinicCustomer(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicCustomer!
  searchClinicDoctor(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctor!
  searchClinicOffice(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicOffice!
  searchClinicDoctorTable(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorTable!
  searchClinicDoctorAvailability(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorAvailability!
  searchCustomer(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_Customer!
  searchVipCustomer(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_VipCustomer!
  searchDoctor(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_Doctor!
  searchDoctorType(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_DoctorType!
  searchPerson(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_Person!
  searchRootDictionary(cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_RootDictionary!
  strExpr(chars: [Char!], strings: [String!], bytes: [Byte!], shorts: [Short!], ints: [Int!], longs: [Long!], floats: [_Float4!], doubles: [Float!], bigDecimals: [BigDecimal!], dates: [_Date!], dateTimes: [_DateTime!], offsetDateTimes: [_OffsetDateTime!], times: [_Time!], booleans: [Boolean!]): String
}

interface _Reference {
  entityId: String
}

input _SortCriterionSpecification {
  crit: String!
  order: _SortOrder! = ASC
  nullsLast: Boolean
}

enum _SortOrder {
  ASC
  DESC
}

scalar _Time

"""An arbitrary precision signed decimal"""
scalar BigDecimal

"""An 8-bit signed integer"""
scalar Byte

"""A UTF-16 code unit; a character on Unicode's BMP"""
scalar Char

interface Clinic {
  id: ID!
  name: String!
  sys_ver: Long
  type: String!
  clinicCustomerList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicCustomer!
  clinicDoctorList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctor!
  clinicOfficeList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicOffice!
  address: _G_Address!
}

interface ClinicCustomer {
  id: ID!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicCustomerTableLost(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorTable!
}

interface ClinicDoctor {
  id: ID!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicDoctorAvailabilityList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorAvailability!
}

interface ClinicDoctorAvailability {
  id: ID!
  beginDate: _DateTime!
  endDate: _DateTime!
  type: String!
  clinicDoctor(alias: String): ClinicDoctor!
  clinicOffice(alias: String): ClinicOffice!
  aggregateRoot(alias: String): Clinic
  clinicDoctorTableList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorTable!
}

interface ClinicDoctorTable {
  id: ID!
  beginDate: _DateTime!
  endDate: _DateTime!
  comment: String
  type: String!
  clinicCustomer(alias: String): ClinicCustomer!
  clinicDoctorAvailability(alias: String): ClinicDoctorAvailability!
  aggregateRoot(alias: String): Clinic
}

interface ClinicOffice {
  id: ID!
  officeNum: String!
  type: String!
  clinic(alias: String): Clinic!
  aggregateRoot(alias: String): Clinic
  clinicOfficeAvailabilityList(elemAlias: String, cond: String, limit: Int, offset: Int, sort: [_SortCriterionSpecification!]): _EC_ClinicDoctorAvailability!
}

interface Customer {
  id: ID!
  insuranceNum: String!
  sys_ver: Long
  type: String!
}

interface Doctor {
  id: ID!
  sys_ver: Long
  type: String!
  doctorType(alias: String): DoctorType!
}

interface DoctorType {
  id: ID!
  descr: String
  name: String!
  sys_ver: Long
  type: String!
  aggregateRoot(alias: String): RootDictionary
}

"""A 64-bit signed integer"""
scalar Long

interface Person {
  id: ID!
  birthDate: _Date
  firstName: String!
  lastName: String!
  sex: _EN_Sex!
  sys_ver: Long
  type: String!
}

interface RootDictionary {
  id: ID!
  sys_ver: Long
  type: String!
}

"""A 16-bit signed integer"""
scalar Short

interface VipCustomer {
  id: ID!
  level: Int
  insuranceNum: String!
  sys_ver: Long
  type: String!
}